Promoter : calculé 1x lors de la 1ère Gen et gardé en mémoire le rester de l’exp dans promoters_

promoter_at : compare la chaîne d’un promoter connu avec la chaîne commençant dans l’adn à l’index passé en paramètre 
et retourne le nombre de différence avec cette chaîne

length(): longueur de l'adn

loop_back(index) : fait en sorte que si l'index dépasse length, ça renvoie quand même une valeur < length de l'adn (length-index)

locate_promoter : cherche des promoter dans toute la longueur de l'adn en appelant look_for_new_promoters_starting_between 0 et la length()

look_for_new_promoters_starting_between : ajoute un promoter si la différence entre la chaîne évalué et le promoteur théorique est 
inférieure à 4 (promoter_at)

add_new_promoter : ajoute un nouveau promoteur dans promoters_s'il n'y est pas déjà avec en key l'index i de début du promoteur 
et en value, le nombre de différence entre le promoteur commençant  l'index i et le promoteur théorique

terminator_at : cherche une chaîne de terminateur à partir de l'index i passé en paramètre tel que debut = fin inversé 
(avec 3 caractères séparateurs entre les deux) et renvoie le nombre de fois que debut != fin inversé

compute_RNA : pour chaque promoter : 
- cherche son terminater 
- s'il l'a trouvé, enregistre un nouvel RNA dans un tableau de rna à un id incrémental

shine_dal_start : détermine si la chaîne commençant à l'indice pos passé en paramètre de taille SHINE_DAL_SIZE
est bien la chaîne de Shine Dalgarno de l'ADN

search_start_protein : détermine pour chaque RNA s'il y a des chaines de Shine_Dalgarno dedans, si c'est le cas,
on enregistre l'index de début de la chaîne SD comme début d'une chaîne de protéine pour ce RNA

compute_protein : pour chaque DNA calcule les protéines associés à ses RNA ; une protéine peut avoir plusieurs CODONS
elle s'arrête quand on rencontre une chaîne du type PROTEIN_END ; on les enregistre dans proteins à un id incrémental
Une protéine doit avoir au moins deux codons dont un CODON pour le STOP

apply_mutations : effectue toutes les mutations sur l'organisme

do_switch : switch la valeur d'un bit et supprime les promoter à cet endroit et calcule la nouvelle distance de hamming
du promoter à cet endroit

generate_mutations : génère un nombre aléatoire de mutation chez un individu (fait des do_witch sur des bits)

prepare_mutation : 
